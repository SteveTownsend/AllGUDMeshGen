using System;
using System.Diagnostics;
using System.IO;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Synthesis;
using Mutagen.Bethesda.Skyrim;
using System.Threading.Tasks;
using nifly;

namespace AllGUD
{
    public class ScriptLess
    {
        private static readonly ModKey AllGUDModKey = ModKey.FromNameAndExtension("All Geared Up Derivative.esp");

        static Lazy<Settings> _settings = null!;
        static Settings settings => _settings.Value;

        private static Config? configuration;
        internal static Config Configuration
        {
            get => configuration!;
        }
        private static IPatcherState<ISkyrimMod, ISkyrimModGetter>? patcherState;
        public static IPatcherState<ISkyrimMod, ISkyrimModGetter> PatcherState
        {
            get => patcherState!;
        }

        public static Task<int> Main(string[] args)
        {
            return SynthesisPipeline.Instance.SetTypicalOpen(GameRelease.SkyrimSE, "AllGUDMeshGen.esp")
                .AddPatch<ISkyrimMod, ISkyrimModGetter>(RunPatch)
                .SetAutogeneratedSettings("Settings", "settings.json", out _settings)
                .Run(args);
        }

        // save options set to simplify binary comparison of output vs Edit Script output
        public static readonly nifly.NifSaveOptions saveOptions = new NifSaveOptions()
        {
            optimize = true,
            sortBlocks = true
        };

        public static void WriteLine(string format, params object?[] args)
        {
            Configuration.logger.WriteLine(format, args);
        }

        public static void RunPatch(IPatcherState<ISkyrimMod, ISkyrimModGetter> state)
        {
            patcherState = state;

            string configFilePath = Path.Combine(state.ExtraSettingsDataPath, "config.json");
            using (configuration = new Config(configFilePath))
            {
                // determine the file path for meshes
                string meshGenLocation = String.IsNullOrEmpty(ScriptLess.Configuration!.meshGenInputFolder) ?
                    ScriptLess.PatcherState!.DataFolderPath : ScriptLess.Configuration.meshGenInputFolder;
                ScriptLess.WriteLine("Process meshes relative to {0}", meshGenLocation);
                MeshHandler meshHandler = new MeshHandler(ScriptLess.Configuration!);

                Stopwatch stopWatch = new Stopwatch();
                stopWatch.Start();

                // Patch human skeletons to have the required nodes
                SkeletonHandler.PatchIfHuman();
                long skellyTime = stopWatch.ElapsedMilliseconds;

                // Analyze records in scope for models and textures
                meshHandler.Analyze();
                long analysisTime = stopWatch.ElapsedMilliseconds - skellyTime;

                // Transform meshes, including any records with alternate textures
                meshHandler.TransformMeshes();
                long meshTime = stopWatch.ElapsedMilliseconds - analysisTime;

                ScriptLess.WriteLine("Records analysis: {0} ms", analysisTime);
                ScriptLess.WriteLine("Mesh transformation: {0} ms", meshTime);
                ScriptLess.WriteLine("Skeleton patching: {0} ms", skellyTime);
            }
        }
    }
}
